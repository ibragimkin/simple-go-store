
services:
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"

      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"

    ports:
      - "9092:9092"

    command: >
      bash -c "
        /opt/bitnami/scripts/kafka/run.sh &
        sleep 10 &&
        kafka-topics.sh --create --topic request --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 &&
        kafka-topics.sh --create --topic response --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 &&
        wait
      "
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10

  db-payment:
    image: postgres:16
    environment:
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U payment -d appdb" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  db-order:
    image: postgres:16
    environment:
      POSTGRES_USER: order
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U order -d appdb" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  migrate-payment:
    image: migrate/migrate:v4.15.1
    depends_on:
      db-payment:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://payment:password@db-payment:5432/appdb?sslmode=disable",
      "up"
    ]
    volumes:
      - ./payment-service/migrations:/migrations
    networks:
      - app-network

  migrate-order:
    image: migrate/migrate:v4.15.1
    depends_on:
      db-order:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://order:password@db-order:5432/appdb?sslmode=disable",
      "up"
    ]
    volumes:
      - ./order-service/migrations:/migrations
    networks:
      - app-network




  payment-service:
    build:
      context: payment-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      migrate-payment:
        condition: service_started
    networks:
      - app-network
    environment:
      HTTP_PORT: 8081
      DATABASE_URL: postgres://payment:password@db-payment:5432/appdb
      KAFKA_URL: kafka:9092
      KAFKA_REQUEST_TOPIC: request
      KAFKA_RESPONSE_TOPIC: response
      KAFKA_GROUP_ID: 11
    ports:
      - 8081:8081

  order-service:
    build:
      context: order-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      migrate-order:
        condition: service_started
    networks:
      - app-network
    environment:
      HTTP_PORT: 8082
      DATABASE_URL: postgres://order:password@db-order:5432/appdb
      KAFKA_URL: kafka:9092
      KAFKA_REQUEST_TOPIC: request
      KAFKA_RESPONSE_TOPIC: response
      KAFKA_GROUP_ID: 22
    ports:
      - 8082:8082
  api-gateway:
    build:
      context: api-gateway
      dockerfile: Dockerfile
    depends_on:
      - order-service
      - payment-service
    networks:
      - app-network
    environment:
      HTTP_PORT: 8083
      ORDER_SERVICE_URL: "http://order-service:8082"
      PAYMENT_SERVICE_URL: "http://payment-service:8081"
    ports:
      - 8083:8083

volumes:
  postgres_payment_data:
  postgres_order_data:
networks:
  app-network:
    driver: bridge
